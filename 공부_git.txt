**git bash 기준이다.**

git config --list
git config --global -e
code .

git config --global core.editor "code"
git config --global -e

git config --global core.editor "code --wait"
git config --global -e

git config --global user.name "bya2"
git config --global user.email "byaa1972@gmail.com"

git config --global core.autocrlf true (윈도우)
git config --global core.autocrlf input (Mac)
 운영체제마다 에디터에서 새로운 줄 바꿈을 할 때 들어가는 문자열이 달라진다.
 윈도우의 경우 carriage-return(\r)과 line feed(\n)가 동시에 들어간다.
 Mac의 경우 line feed(\n)만 들어간다.
 이 차이점 때문에 git 저장소를 다양한 운영체제에서 사용할 경우, 내가 수정하지 않았음에도 불구하고 줄바꿈 문자열이 달라져서 git history나 git 블레임을 보는 데 문제가 있을 수 있다. 이것을 수정할 수 있는 속성이 core.autocrlf이다. 이를 윈도우에서 true로 설정하면, git에 저장할 때는 carriage-return(\r)을 삭제하고, git에서 window로 가져올 때는 carriage-return(\r)을 붙여준다.
 Mac에서는 git에서 받아올 때는 수정이 없고, git에 저장할 대는 carriage-return(\r)을 삭제한다.


 git 명령어 -옵션
 https://git-scm.com/docs

 git init을 통해 git을 초기화한다.
 해당 폴더 내에 .git폴더를 생성하여 git에 관한 모든 정보들이 저장된다.
 git을 초기화하면 기본적으로 master branch가 생성된다.
 기본적으로 commit해서 버전을 관리하는 branch는 master branch다.

 terminal: dir -h 를 통해 숨겨진 항목까지 볼 수 있다.
 gitbash: ls -al

 gitbash: rm -rf .git
 .git폴더와 그 내부의 파일들을 모두 삭제해주면 해당 폴더는 더 이상 git 프로젝트 폴더가 아니다.

 sourcetree에서는 new tab에서 Create에 [목적지: 경로\만들깃폴더]를 적어주면 로컬 저장소를 만들 수 있다.

 git status
 깃 폴더의 상태를 확인할 수 있다.

 git config --global alias.이름 명령어
 명령어에 대한 Alias를 만들 수 있다.

 **중요!**
 **Git의 Workflow**

 git에는 총 3가지의 작업 환경이 나뉘어져있다.
 - working directory : 프로젝트의 파일들을 작업하는 환경.
 - staging area: 어느 정도 작업하다가 버전 history에 저장할 준비가 되어있는 파일들을 옮겨놓는 환경.
 - .git directory: 버전 history를 가지고 있는 환경.

 *예시
 b와 c 파일을 working directory에서 작업하다가 어느 정도 준비가 되면 staging area로 옮기고, commit이라는 명령어를 이용하여 staging area에 있는 파일을 .git directory에 저장한다.

 a 파일도 마찬가지의 방법으로 .git directory에 저장한다.

 이렇게 .git directory에 저장된 파일을은 checkout이라는 명령어를 이용해서 언제든지 원하는 버전으로 working directory에 가져올 수 있다.

 일단 이렇게 저장된 git history는 내 컴퓨터(local)에만 보관된다. 이는 local에서 문제가 생기면 보관 중인 작업물들을 모두 잃어버릴 수 있다는 뜻이다.
 따라서 github와 같은 서버에 push라는 명령어를 이용하여 나의 .git directory를 서버에 업로드할 수 있다. 서버에서 다시 local로 다운로드 받고 싶을 때는 pull이라는 명령어를 이용할 수 있다.

 각각의 버전에는 어떤 정보가 들어 있다.
 각각의 commit에는 스냅샷된 정보들을 기반으로 해서 고유한 해쉬코드가 부과된다. 이 아이디를 이용해서 버전 정보를 참조할 수 있다. 이 commit에는 id 뿐만 아니라 어떤 버전인지 버전에 관한 메세지와 누가 작성했는지, 날짜와 시간과 같은 정보들이 포함되어 있다.

 working directory는 엄밀히 말하면 두가지로 나뉘어진다.
 - untracked
 - tracked: git이 알고 있는 파일. 이도 unmodified와 modified로 나눌 수 있다.

 새로 만들어진 파일이나 기존에 존재하던 프로젝트에서 깃을 초기화하면 파일에 대한 정보가 전혀 없는 상황이므로 아직 tracking이 되지 않는 파일들을 untracked으로 나눌 수 있다.

 unmodified는 수정되지 않은 파일이고 modified는 수정된 파일이다. 수정된 파일만 staging area로 넘어갈 수 있다.

 git bash: echo hello world! > a.txt
 마찬가지로 b.txt, c.txt 파일을 만든다.
 git status를 하면 a, b, c 파일이 untracked files로 나타난다.

 이는 git add를 통해서 tracking 할 수 있다. (working directory => staging area)
 git add 파일
 ex) git add a.txt
 ex) git add *.txt

 staging area에 있는 파일을 수정하면 working directory의 modified에 수정된 파일이 생성된다. (staging area에는 수정되기 전 파일에 저장되어 있다.)

 git rm --cached 파일
 staging area에 있는 파일을 working directory로 이동시킨다.

 git add .
 staging area에 있는 모든 파일을 포함해서 staging area에 업데이트를 한다.
 파일을 삭제했을 경우 해당 파일을 staging area에서 사라진다.
 이는 git add *와 조금 다르다. 

 git add를 하고 싶은 파일 유형만 하는 법
 git add *.css

 추가하고 싶지 않은 파일 형식을 지정하는 방법이 있다.
 echo *.log > .gitignore
 이후
 echo *.css >> .gitignore

 이렇게 하면 git status에서 .gitignore 파일은 보이지만, 더이상 log.log 파일은 보이지 않는다.


 git status -h 도움말
 git status -s 간단한 버전.

 git status -s를 통해서 어떤 파일이 수정되었는지 확인 할 수 있지만 어떤 내용이 수정되었는지 확인할 수 없다.
 
 이 때 git diff를 사용한다. (working directory에 있는 것을 확인한다.)
 diff --git a/c.txt b/c.txt =====> a는 이전 버전, b는 현재 버전을 의미한다.
 index는 깃 내부적으로 파일들을 참조할 때 사용하는 것이다.

 git diff --staged (staging area에 있는 것을 확인한다.)

 git diff --staged를 vscode에서 확인하는 방법이 있다.
 git config --global -e
 vscode 내에서
[difftool "vscode"]
	cmd = code --wait --diff $LOCAL $REMOTE
를 작성한다.
 다시 terminal에서 git difftool, git difftool --staged

 git commit
 staging area => .git directory
 
 git commit -m "message"
 message와 함께 commit

 git log를 통해서 history 관찰 가능.

 staging area와 working directory에 있는 모든 파일을 commit
 git commit -a
 git commit -am "message"

 commit 메세지에 맞게 해당하는 내용만 추가하는 것이 바람직하다.! 관리하기 편한다.! 세분화하기.
 



 


